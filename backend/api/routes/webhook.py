"""
API —Ä–æ—É—Ç—ã –¥–ª—è webhook –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""
from fastapi import APIRouter, HTTPException, Request, BackgroundTasks, Header
from pydantic import BaseModel
from typing import Optional, Dict, Any
import logging
import hashlib
import hmac

router = APIRouter()
logger = logging.getLogger(__name__)

class WebhookPayload(BaseModel):
    ref: Optional[str] = None
    repository: Optional[Dict[str, Any]] = None
    commits: Optional[list] = None

async def process_github_push(payload: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ push —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub
    """
    try:
        repo_name = payload.get('repository', {}).get('name', 'unknown')
        ref = payload.get('ref', '')
        commits_count = len(payload.get('commits', []))
        
        logger.info(f"üîÑ GitHub Push: {repo_name}, ref: {ref}, commits: {commits_count}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å
        if 'main' in ref or 'master' in ref:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–ª—è {repo_name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from ...indexers.simple_project_indexer import SimpleProjectIndexer
            from ...indexers.python_indexer import PythonIndexer
            from ...indexers.markdown_indexer import MarkdownIndexer
            from ...rag.engine import RAGEngine
            import subprocess
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            project_map = {
                'staffprobot': 'staffprobot',
                'project-brain': 'project-brain'
            }
            
            project_name = project_map.get(repo_name.lower())
            
            if project_name:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
                from ...indexers.simple_project_indexer import SimpleProjectIndexer
                indexer = SimpleProjectIndexer()
                project_config = indexer.get_project_config(project_name)
                
                if not project_config:
                    logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                project_path = project_config.get('path')
                git_url = project_config.get('git_url')
                
                # –®–ê–ì 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ git
                try:
                    logger.info(f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞: git pull –≤ {project_path}")
                    
                    # git fetch origin
                    result = subprocess.run(
                        ['git', 'fetch', 'origin'],
                        cwd=project_path,
                        capture_output=True,
                        text=True,
                        timeout=30
                    )
                    
                    if result.returncode != 0:
                        logger.error(f"‚ùå git fetch failed: {result.stderr}")
                        return
                    
                    # git pull origin main/master
                    branch = 'main' if 'main' in ref else 'master'
                    result = subprocess.run(
                        ['git', 'pull', 'origin', branch],
                        cwd=project_path,
                        capture_output=True,
                        text=True,
                        timeout=60
                    )
                    
                    if result.returncode != 0:
                        logger.error(f"‚ùå git pull failed: {result.stderr}")
                        return
                    
                    logger.info(f"‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {result.stdout.strip()}")
                    
                except subprocess.TimeoutExpired:
                    logger.error("‚ùå Git –æ–ø–µ—Ä–∞—Ü–∏—è timeout")
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ git pull: {e}")
                    return
                
                # –®–ê–ì 2: –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
                logger.info(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                project_indexer = SimpleProjectIndexer()
                python_indexer = PythonIndexer()
                markdown_indexer = MarkdownIndexer()
                rag_engine = RAGEngine()
                await rag_engine.initialize()
                
                stats = {
                    'total_files': 0,
                    'total_chunks': 0,
                    'errors': 0
                }
                
                # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
                async for file_info in project_indexer.iter_project_files(project_name):
                    try:
                        file_path = file_info['file_path']
                        file_type = file_info['file_type']
                        relative_path = file_info['relative_path']
                        
                        stats['total_files'] += 1
                        
                        # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                        chunks = []
                        if file_type == 'python':
                            chunks = await python_indexer.index_file(file_path)
                        elif file_type == 'markdown':
                            chunks = await markdown_indexer.index_file(file_path)
                        
                        # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤
                        for chunk in chunks:
                            doc_type = python_indexer._classify_doc_type(relative_path) if file_type == 'python' else 'documentation'
                            
                            await rag_engine.store_document(
                                project=project_name,
                                content=chunk['content'],
                                metadata={
                                    'file': relative_path,
                                    'type': chunk['type'],
                                    'doc_type': doc_type,
                                    'start_line': chunk.get('start_line', 0),
                                    'end_line': chunk.get('end_line', 0),
                                    'lines': chunk.get('lines', '0-0'),
                                    'project': project_name,
                                    'chunk_id': chunk.get('chunk_id', hash(chunk['content'][:100]))
                                }
                            )
                            stats['total_chunks'] += 1
                    
                    except Exception as e:
                        stats['errors'] += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                
                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
                
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç {repo_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        
        else:
            logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–ª—è ref: {ref}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)

def verify_github_signature(payload_body: bytes, signature: str, secret: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç GitHub
    """
    if not signature:
        return False
    
    # GitHub –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "sha256=..."
    hash_algorithm, github_signature = signature.split('=')
    
    # –í—ã—á–∏—Å–ª—è–µ–º HMAC
    mac = hmac.new(secret.encode(), msg=payload_body, digestmod=hashlib.sha256)
    expected_signature = mac.hexdigest()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    return hmac.compare_digest(expected_signature, github_signature)

@router.post("/github")
async def github_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    x_hub_signature_256: Optional[str] = Header(None),
    x_github_event: Optional[str] = Header(None)
):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç GitHub
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ GitHub:
    1. Settings ‚Üí Webhooks ‚Üí Add webhook
    2. Payload URL: https://your-domain.com/api/webhook/github
    3. Content type: application/json
    4. Secret: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env –∫–∞–∫ GITHUB_WEBHOOK_SECRET
    5. Events: Just the push event
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        payload = await request.json()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        logger.info(f"üì• GitHub webhook: event={x_github_event}, repo={payload.get('repository', {}).get('name', 'unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ–∫—Ä–µ—Ç)
        import os
        webhook_secret = os.getenv('GITHUB_WEBHOOK_SECRET')
        if webhook_secret:
            if not verify_github_signature(body, x_hub_signature_256, webhook_secret):
                logger.warning("‚ùå Invalid webhook signature")
                raise HTTPException(status_code=401, detail="Invalid signature")
        else:
            logger.warning("‚ö†Ô∏è GITHUB_WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - webhook –ù–ï –∑–∞—â–∏—â—ë–Ω!")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ push —Å–æ–±—ã—Ç–∏—è
        if x_github_event == 'push':
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
            background_tasks.add_task(process_github_push, payload)
            
            return {
                "status": "accepted",
                "message": "Push event will be processed",
                "ref": payload.get('ref'),
                "commits": len(payload.get('commits', []))
            }
        
        elif x_github_event == 'ping':
            # Ping —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook
            return {
                "status": "ok",
                "message": "Webhook configured successfully"
            }
        
        else:
            logger.info(f"‚ÑπÔ∏è Ignoring event: {x_github_event}")
            return {
                "status": "ignored",
                "message": f"Event {x_github_event} is not processed"
            }
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/test")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint"""
    return {
        "status": "ok",
        "message": "Webhook API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "endpoints": {
            "github": "/api/webhook/github"
        }
    }

@router.post("/manual-reindex/{project_name}")
async def manual_reindex(project_name: str, background_tasks: BackgroundTasks):
    """
    –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    """
    logger.info(f"üîÑ –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π payload –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    fake_payload = {
        'ref': 'refs/heads/main',
        'repository': {'name': project_name},
        'commits': []
    }
    
    background_tasks.add_task(process_github_push, fake_payload)
    
    return {
        "status": "accepted",
        "message": f"Reindexing {project_name} started in background"
    }

