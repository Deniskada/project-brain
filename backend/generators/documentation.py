"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""
import logging
from typing import Dict, Any, List
from datetime import datetime

logger = logging.getLogger(__name__)

class DocumentationGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, rag_engine):
        self.rag = rag_engine
    
    async def generate_for_developers(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        doc = []
        doc.append("# üõ†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n")
        doc.append(f"**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        doc.append(f"**–ü—Ä–æ–µ–∫—Ç:** {project_data.get('project_path', 'N/A')}\n\n")
        
        # API Reference
        doc.append("## üì° API Reference\n")
        routes = project_data.get('routes', [])
        if routes:
            doc.append(f"**–í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:** {len(routes)}\n\n")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
            by_method = {}
            for route in routes:
                method = route['method']
                by_method.setdefault(method, []).append(route)
            
            for method, routes_list in sorted(by_method.items()):
                doc.append(f"### {method}\n")
                for route in routes_list:
                    doc.append(f"- `{method} {route['path']}` - {route['file']}\n")
                doc.append("\n")
        
        # Database Schema
        doc.append("## üóÑÔ∏è Database Schema\n")
        models = project_data.get('models', [])
        if models:
            doc.append(f"**–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π:** {len(models)}\n\n")
            for model in models:
                doc.append(f"### {model['name']}\n")
                if model.get('docstring'):
                    doc.append(f"{model['docstring']}\n")
                
                doc.append("**–ü–æ–ª—è:**\n")
                for field in model.get('fields', []):
                    doc.append(f"- `{field['name']}`: {field['type']}\n")
                doc.append("\n")
        
        # Architecture Overview
        doc.append("## üèóÔ∏è Architecture Overview\n")
        structure = project_data.get('structure', {})
        doc.append(f"**–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {structure.get('total_files', 0)}\n")
        doc.append(f"**–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:** {structure.get('total_dirs', 0)}\n\n")
        
        doc.append("**–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:**\n")
        for dir_name in structure.get('main_directories', []):
            doc.append(f"- `{dir_name}/`\n")
        doc.append("\n")
        
        # Services
        doc.append("## üîß Services\n")
        services = project_data.get('services', [])
        if services:
            doc.append(f"**–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤:** {len(services)}\n\n")
            for service in services:
                doc.append(f"- `{service['file']}`\n")
        
        return "".join(doc)
    
    async def generate_for_admins(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        doc = []
        doc.append("# üîß –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n")
        doc.append(f"**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        doc.append("## üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ\n")
        doc.append("### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è\n")
        doc.append("- Python 3.11+\n")
        doc.append("- Docker –∏ Docker Compose\n")
        doc.append("- PostgreSQL 15+\n")
        doc.append("- Redis 7+\n\n")
        
        doc.append("### –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n")
        doc.append("```bash\n")
        doc.append("# 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n")
        doc.append("git clone <repo_url>\n")
        doc.append("cd project\n\n")
        doc.append("# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n")
        doc.append("cp .env.example .env\n")
        doc.append("# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª\n\n")
        doc.append("# 3. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker\n")
        doc.append("docker compose up -d\n")
        doc.append("```\n\n")
        
        doc.append("## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n")
        doc.append("### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n")
        doc.append("- `DATABASE_URL` - URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î\n")
        doc.append("- `REDIS_URL` - URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis\n")
        doc.append("- `SECRET_KEY` - —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n")
        
        doc.append("## üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n")
        doc.append("### –õ–æ–≥–∏\n")
        doc.append("```bash\n")
        doc.append("# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n")
        doc.append("docker compose logs -f\n")
        doc.append("```\n\n")
        
        doc.append("## üõ†Ô∏è Troubleshooting\n")
        doc.append("### –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n")
        doc.append("1. **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è**\n")
        doc.append("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n")
        doc.append("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞\n\n")
        
        return "".join(doc)
    
    async def generate_for_users(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        doc = []
        doc.append("# üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n")
        doc.append(f"**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        doc.append("## üéØ –í–≤–µ–¥–µ–Ω–∏–µ\n")
        doc.append("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n")
        
        doc.append("## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n")
        doc.append("### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n")
        doc.append("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n")
        doc.append("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n")
        doc.append("3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email\n\n")
        
        doc.append("### –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏\n")
        doc.append("1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É\n")
        doc.append("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å\n")
        doc.append("3. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!\n\n")
        
        doc.append("## üí° –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n")
        doc.append("### –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏\n")
        doc.append("- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n")
        doc.append("- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n")
        doc.append("- –£–¥–∞–ª–µ–Ω–∏–µ\n\n")
        
        doc.append("## ‚ùì FAQ\n")
        doc.append("### –ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?\n")
        doc.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞.\n\n")
        
        doc.append("### –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å?\n")
        doc.append("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n")
        
        return "".join(doc)
    
    async def generate_all(self, project_data: Dict[str, Any]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        return {
            "developers": await self.generate_for_developers(project_data),
            "admins": await self.generate_for_admins(project_data),
            "users": await self.generate_for_users(project_data)
        }

