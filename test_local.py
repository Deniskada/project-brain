#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Project Brain –±–µ–∑ Docker
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.rag.engine import RAGEngine
from backend.llm.ollama_client import OllamaClient
from backend.storage.chroma_client import ChromaClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_rag_engine():
    """–¢–µ—Å—Ç RAG engine"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Engine...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ–∑ ChromaDB –¥–ª—è —Ç–µ—Å—Ç–∞)
        rag = RAGEngine()
        print("‚úÖ RAG Engine —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        context = await rag.retrieve_context("—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", "staffprobot")
        print(f"‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RAG Engine: {e}")
        return False

async def test_ollama_client():
    """–¢–µ—Å—Ç Ollama –∫–ª–∏–µ–Ω—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama Client...")
    
    try:
        client = OllamaClient("http://localhost:11434")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if await client.test_connection():
            print("‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ö†Ô∏è  Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker run -d -p 11434:11434 ollama/ollama)")
            return False
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            response = await client.generate_response(
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                [{"content": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "file": "test.py"}],
                max_tokens=100
            )
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: {response[:100]}...")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama Client: {e}")
        return False

async def test_chroma_client():
    """–¢–µ—Å—Ç ChromaDB –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChromaDB Client...")
    
    try:
        client = ChromaClient("localhost", 8000)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            await client.initialize()
            print("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker run -d -p 8000:8000 chromadb/chroma")
            return False
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        test_chunks = [
            {
                "content": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                "file": "test.py",
                "lines": "1-10",
                "type": "test",
                "chunk_id": 1
            }
        ]
        
        await client.store_chunks("test_project", test_chunks)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ChromaDB")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ChromaDB Client: {e}")
        return False

async def test_python_indexer():
    """–¢–µ—Å—Ç Python –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞"""
    print("üêç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python Indexer...")
    
    try:
        from backend.indexers.python_indexer import PythonIndexer
        
        indexer = PythonIndexer()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        files = await indexer.find_files(
            "/home/sa/projects/staffprobot",
            ["**/*.py"],
            ["**/venv/**", "**/__pycache__/**"]
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(files)} Python —Ñ–∞–π–ª–æ–≤")
        
        # –¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if files:
            test_file = files[0]
            chunks = await indexer.index_file(test_file)
            print(f"‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {test_file}: {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Python Indexer: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Project Brain")
    print("=" * 50)
    
    tests = [
        test_python_indexer,
        test_rag_engine,
        test_ollama_client,
        test_chroma_client
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
            print()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   docker compose -f docker-compose.local.yml up -d")

if __name__ == "__main__":
    asyncio.run(main())
