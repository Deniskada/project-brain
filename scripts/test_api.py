#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Project Brain API
"""
import requests
import json
import time
import sys

API_BASE = "http://localhost:8001"

def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health...")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Health check passed")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_query():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ AI"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/query...")
    try:
        payload = {
            "query": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω?",
            "project": "staffprobot",
            "max_tokens": 500
        }
        
        response = requests.post(
            f"{API_BASE}/api/query",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Query test passed")
            print(f"üìù –û—Ç–≤–µ—Ç: {data['answer'][:200]}...")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(data.get('sources', []))}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data.get('processing_time', 0):.2f}—Å")
            return True
        else:
            print(f"‚ùå Query test failed: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Query test error: {e}")
        return False

def test_projects():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    print("üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/projects...")
    try:
        response = requests.get(f"{API_BASE}/api/projects", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Projects test passed")
            print(f"üìä –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(data)}")
            for project in data:
                print(f"  - {project['name']}: {project.get('description', 'No description')}")
            return True
        else:
            print(f"‚ùå Projects test failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Projects test error: {e}")
        return False

def test_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/stats...")
    try:
        response = requests.get(f"{API_BASE}/api/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Stats test passed")
            print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  - –ü—Ä–æ–µ–∫—Ç–æ–≤: {data.get('total_projects', 0)}")
            print(f"  - –ß–∞–Ω–∫–æ–≤: {data.get('total_chunks', 0)}")
            print(f"  - –§–∞–π–ª–æ–≤: {data.get('total_files', 0)}")
            return True
        else:
            print(f"‚ùå Stats test failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Stats test error: {e}")
        return False

def test_context_rules():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/context-rules...")
    try:
        params = {
            "file": "apps/web/routes/owner.py",
            "role": "owner"
        }
        response = requests.get(f"{API_BASE}/api/context-rules", params=params, timeout=5)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Context rules test passed")
            print(f"üìã –ü—Ä–∞–≤–∏–ª: {data.get('rules_count', 0)}")
            print(f"üî¢ –¢–æ–∫–µ–Ω–æ–≤: {data.get('estimated_tokens', 0)}")
            return True
        else:
            print(f"‚ùå Context rules test failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Context rules test error: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Project Brain API")
    print("=" * 50)
    
    tests = [
        test_health,
        test_projects,
        test_stats,
        test_context_rules,
        test_query
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
