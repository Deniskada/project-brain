#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ Project Brain
"""
import json
import requests
import time
from typing import Dict, List, Any
from datetime import datetime

API_URL = "http://localhost:8003/api/query"
PROJECT = "staffprobot"

def load_test_queries(file_path: str = "tests/test_queries.json") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def test_query(query: str) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        response = requests.post(
            API_URL,
            json={"query": query, "project": PROJECT},
            timeout=60
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                "error": f"HTTP {response.status_code}",
                "answer": "",
                "sources": [],
                "processing_time": 0
            }
    except Exception as e:
        return {
            "error": str(e),
            "answer": "",
            "sources": [],
            "processing_time": 0
        }

def format_result(query: str, result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
    output = []
    output.append(f"\n{'='*80}")
    output.append(f"–í–û–ü–†–û–°: {query}")
    output.append(f"{'='*80}")
    
    if "error" in result:
        output.append(f"‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
    else:
        output.append(f"\n‚úÖ –û–¢–í–ï–¢ ({result['processing_time']:.2f}—Å):")
        output.append(f"{result['answer'][:300]}...")
        
        output.append(f"\nüìÇ –ò–°–¢–û–ß–ù–ò–ö–ò ({len(result['sources'])}):")
        for i, source in enumerate(result['sources'][:3], 1):
            output.append(f"  {i}. {source['file']} ({source.get('lines', 'N/A')})")
    
    return "\n".join(output)

def run_tests(limit_per_category: int = 2):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Project Brain")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîó API URL: {API_URL}\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_data = load_test_queries()
    
    results = []
    total_time = 0
    total_queries = 0
    
    for category_data in test_data["test_queries"]:
        category = category_data["category"]
        queries = category_data["queries"][:limit_per_category]
        
        print(f"\n{'='*80}")
        print(f"üìÅ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category}")
        print(f"{'='*80}")
        
        for query in queries:
            print(f"\n‚è≥ –¢–µ—Å—Ç–∏—Ä—É—é: {query[:60]}...")
            
            start_time = time.time()
            result = test_query(query)
            elapsed = time.time() - start_time
            
            total_queries += 1
            total_time += elapsed
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            formatted = format_result(query, result)
            print(formatted)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            results.append({
                "category": category,
                "query": query,
                "result": result,
                "elapsed": elapsed
            })
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*80}")
    print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/total_queries:.2f}—Å")
    
    # –£—Å–ø–µ—à–Ω—ã–µ/–Ω–µ—É—Å–ø–µ—à–Ω—ã–µ
    successful = sum(1 for r in results if "error" not in r["result"])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{total_queries}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_file = f"tests/test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "total_queries": total_queries,
            "total_time": total_time,
            "avg_time": total_time/total_queries,
            "successful": successful,
            "results": results
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")

if __name__ == "__main__":
    run_tests(limit_per_category=2)  # –ü–æ 2 –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

