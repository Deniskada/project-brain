#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å doc_type –∏ —É–º–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
"""
import requests
import json
from datetime import datetime

API_URL = "http://localhost:8003/api/query"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
TEST_QUERIES = [
    {
        "category": "how_to (–¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ—É—Ç—ã)",
        "queries": [
            "—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç?",
            "–∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É?",
            "–∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
            "–∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–∞?",
        ],
        "expected_doc_types": ["route", "handler", "api"],
        "not_expected": ["model"]  # –ú–æ–¥–µ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
    },
    {
        "category": "structure (–¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–¥–µ–ª–∏)",
        "queries": [
            "–∫–∞–∫–∏–µ –ø–æ–ª—è –≤ –º–æ–¥–µ–ª–∏ User?",
            "–∫–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã shifts?",
            "–∫–∞–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã —É –æ–±—ä–µ–∫—Ç–∞ Object?",
        ],
        "expected_doc_types": ["model", "schema"],
        "not_expected": ["route"]
    },
    {
        "category": "api (–¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ—É—Ç—ã)",
        "queries": [
            "–∫–∞–∫–∏–µ API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏?",
            "–∫–∞–∫–∏–µ —Ä–æ—É—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è?",
        ],
        "expected_doc_types": ["route", "api"],
        "not_expected": []
    }
]

def test_query(query: str) -> dict:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        response = requests.post(
            API_URL,
            json={"query": query, "project": "staffprobot"},
            timeout=30
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"error": str(e)}

def analyze_results(result: dict, expected_types: list, not_expected: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    analysis = {
        "found_expected": False,
        "found_unexpected": False,
        "first_doc_type": None,
        "doc_types": []
    }
    
    sources = result.get("sources", [])
    if not sources:
        return analysis
    
    for source in sources:
        # –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å doc_type
        # –ù–æ API –º–æ–∂–µ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ —Ñ–∞–π–ª—É
        file_path = source.get("file", "").lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º doc_type –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
        if "routes" in file_path or "routers" in file_path:
            doc_type = "route"
        elif "handlers" in file_path:
            doc_type = "handler"
        elif "api" in file_path and "domain" not in file_path:
            doc_type = "api"
        elif "models" in file_path or "entities" in file_path:
            doc_type = "model"
        elif "services" in file_path:
            doc_type = "service"
        else:
            doc_type = "other"
        
        analysis["doc_types"].append(doc_type)
    
    # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if analysis["doc_types"]:
        analysis["first_doc_type"] = analysis["doc_types"][0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
        if analysis["first_doc_type"] in expected_types:
            analysis["found_expected"] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if analysis["first_doc_type"] in not_expected:
            analysis["found_unexpected"] = True
    
    return analysis

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    total_tests = 0
    passed_tests = 0
    
    for test_category in TEST_QUERIES:
        category = test_category["category"]
        expected_types = test_category["expected_doc_types"]
        not_expected = test_category["not_expected"]
        
        print(f"\n{'='*80}")
        print(f"üìÅ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category}")
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º: {', '.join(expected_types)}")
        if not_expected:
            print(f"‚ùå –ù–ï –æ–∂–∏–¥–∞–µ–º: {', '.join(not_expected)}")
        print(f"{'='*80}\n")
        
        for query in test_category["queries"]:
            total_tests += 1
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = test_query(query)
            
            if "error" in result:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {result['error']}\n")
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            analysis = analyze_results(result, expected_types, not_expected)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"   üìä –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {analysis['first_doc_type']}")
            print(f"   üìã –í—Å–µ —Ç–∏–ø—ã: {', '.join(analysis['doc_types'][:3])}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            if analysis["found_expected"] and not analysis["found_unexpected"]:
                print(f"   ‚úÖ –£–°–ü–ï–• - –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                passed_tests += 1
            elif analysis["found_unexpected"]:
                print(f"   ‚ùå –ü–†–û–í–ê–õ - –Ω–∞–π–¥–µ–Ω –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø ({analysis['first_doc_type']})")
            elif not analysis["found_expected"]:
                print(f"   ‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û - –Ω–µ –Ω–∞—à–ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø, –Ω–æ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ—Ç")
                passed_tests += 0.5
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            sources = result.get("sources", [])
            if sources:
                print(f"   üìÑ –§–∞–π–ª: {sources[0].get('file', 'N/A')}")
            
            print()
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*80}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {total_tests - passed_tests}/{total_tests}")
    
    if passed_tests / total_tests >= 0.8:
        print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞!")
    elif passed_tests / total_tests >= 0.6:
        print(f"\n‚úÖ –•–û–†–û–®–û! –ü–æ–∏—Å–∫ —Å—Ç–∞–ª –ª—É—á—à–µ, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
    else:
        print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê - —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Å—ë –µ—â—ë –Ω–∏–∑–∫–∞—è")

if __name__ == "__main__":
    run_tests()

